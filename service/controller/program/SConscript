#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# linux sample app  build script (Sample Client & Sample Server)
##
Import('env')

# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')

controller_program_env = lib_env.Clone()

######################################################################
# Build flags
######################################################################
controller_program_env.AppendUnique(CPPPATH = ['../../../extlibs/cjson'])
controller_program_env.AppendUnique(CPPPATH = ['../../../extlibs/timer'])
controller_program_env.AppendUnique(CPPPATH = ['../../../resource/csdk/connectivity/api'])
controller_program_env.AppendUnique(CXXFLAGS = ['-O2', '-g', '-Wall', '-fmessage-length=0', '-std=c++0x'])
controller_program_env.AppendUnique(CPPDEFINES = ['LINUX'])
controller_program_env.AppendUnique(CPPPATH = ['../include'])
controller_program_env.AppendUnique(CPPPATH = ['../../resource-encapsulation/include'])
controller_program_env.AppendUnique(CPPPATH = ['../../resource-encapsulation/src/common/primitiveResource/include'])
controller_program_env.AppendUnique(CPPPATH = ['../../resource-encapsulation/src/common/expiryTimer/include'])
controller_program_env.AppendUnique(CPPPATH = ['../../resource-hosting/src'])
controller_program_env.AppendUnique(CPPPATH = ['../../scene-manager/include'])
controller_program_env.AppendUnique(CPPPATH = ['../../things-manager/sdk/inc'])
controller_program_env.AppendUnique(CPPPATH = ['../../things-manager/sdk/src'])

# RD	
controller_program_env.AppendUnique(CPPPATH = ['../../resource-directory/include'])

# Resource Types
controller_program_env.AppendUnique(CPPPATH = ['../../rich-server/include'])

controller_program_env.AppendUnique(LIBS = [
    'scene_manager',
    'resource_hosting',
    'rcs_client',
    'rcs_server',
    'controller',
    'resource_directory',	
    'rcs_common',
    'oc',
    'octbstack',
    'oc_logger',
    'connectivity_abstraction',
    'coap',
    'pthread',
    'libTGMSDKLibrary'
    ])

if env.get('SECURED') == '1':
    controller_program_env.AppendUnique(LIBS = ['tinydtls'])

if 'rt' in controller_program_env.get('LIBS'):
    controller_program_env.Append(LIBS = ['rt'])

######################################################################
# ##### Client #####
######################################################################

ControllerMain = controller_program_env.Program('controller_main', 'main.cpp')
ControllerMain = controller_program_env.Program('buttonServer', 'buttonserver.cpp')
ControllerMain = controller_program_env.Program('lightServer', 'lightserver.cpp')
ControllerMain = controller_program_env.Program('fanServer', 'fanserver.cpp')


controller_program_env.InstallTarget(ControllerMain, 'controller_main')

